number = c(25000, 40000, 55000))
# combining two data sets
df.all <- rbind(df.content, df.customers)
# calculating dummies, max and min values of X for plotting
df.all <- df.all %>%
group_by(step) %>%
mutate(totnum = sum(number)) %>%
ungroup() %>%
mutate(dum = (max(totnum) - totnum)/2,
maxx = totnum + dum,
minx = dum)
# data frame for plotting funnel lines
df.lines <- df.all %>%
select(step, maxx, minx) %>%
group_by(step) %>%
unique()
# data frame with dummies
df.dum <- df.all %>%
select(step, dum) %>%
unique() %>%
mutate(content = 'dummy',
number = dum) %>%
select(content, step, number)
# data frame with rates
conv <- df.all$totnum[df.all$step == 'action']
df.rates <- df.all %>%
select(step, totnum) %>%
group_by(step) %>%
unique() %>%
ungroup() %>%
mutate(prevnum = lag(totnum),
rate = ifelse(step == 'new' | step == 'engaged' | step == 'loyal',
round(totnum / conv, 3),
round(totnum / prevnum, 3))) %>%
select(step, rate)
df.rates <- na.omit(df.rates)
# creting final data frame
df.all <- df.all %>%
select(content, step, number)
df.all <- rbind(df.all, df.dum)
df.all <- df.all %>%
group_by(step) %>%
arrange(desc(content)) %>%
ungroup()
# calculating position of labels
df.all <- df.all %>%
group_by(step) %>%
mutate(pos = cumsum(number) - 0.5*number)
# defining order of steps
df.all$step <- factor(df.all$step, levels = c('loyal', 'engaged', 'new', 'action', 'desire', 'interest', 'awareness'))
list <- c(unique(as.character(df.all$content)))
df.all$content <- factor(df.all$content, levels = c('dummy', c(list)))
# creating custom palette with 'white' color for dummies
cols <- c("#ffffff", "#fec44f", "#fc9272", "#a1d99b", "#fee0d2", "#2ca25f",
"#8856a7", "#43a2ca", "#fdbb84", "#e34a33",
"#a6bddb", "#dd1c77", "#ffeda0", "#756bb1")
# plotting chart
ggplot() +
theme_minimal() +
coord_flip() +
scale_fill_manual(values=cols) +
geom_bar(data=df.all, aes(x=step, y=number, fill=content), stat="identity", width=1) +
geom_text(data=df.all[df.all$content!='dummy', ],
aes(x=step, y=pos, label=paste0(content, '-', number/1000, 'K')),
size=4, color='white', fontface="bold") +
geom_ribbon(data=df.lines, aes(x=step, ymax=max(maxx), ymin=maxx, group=1), fill='white') +
geom_line(data=df.lines, aes(x=step, y=maxx, group=1), color='darkred', size=4) +
geom_ribbon(data=df.lines, aes(x=step, ymax=minx, ymin=min(minx), group=1), fill='white') +
geom_line(data=df.lines, aes(x=step, y=minx, group=1), color='darkred', size=4) +
geom_text(data=df.rates, aes(x=step, y=(df.lines$minx[-1]), label=paste0(rate*100, '%')), hjust=1.2,
color='darkblue', fontface="bold") +
theme(legend.position='none', axis.ticks=element_blank(), axis.text.x=element_blank(),
axis.title.x=element_blank())
library(dplyr)
library(ggplot2)
library(reshape2)
# creating a data samples
# content
df.content <- data.frame(content = c('main', 'ad landing',
'product 1', 'product 2', 'product 3', 'product 4',
'shopping cart',
'thank you page'),
step = c('awareness', 'awareness',
'interest', 'interest', 'interest', 'interest',
'desire',
'action'),
number = c(150000, 80000,
80000, 40000, 35000, 25000,
130000,
120000))
# customers
df.customers <- data.frame(content = c('new', 'engaged', 'loyal'),
step = c('new', 'engaged', 'loyal'),
number = c(25000, 40000, 55000))
# combining two data sets
df.all <- rbind(df.content, df.customers)
# calculating dummies, max and min values of X for plotting
df.all <- df.all %>%
group_by(step) %>%
mutate(totnum = sum(number)) %>%
ungroup() %>%
mutate(dum = (max(totnum) - totnum)/2,
maxx = totnum + dum,
minx = dum)
# data frame for plotting funnel lines
df.lines <- df.all %>%
select(step, maxx, minx) %>%
group_by(step) %>%
unique()
# data frame with dummies
df.dum <- df.all %>%
select(step, dum) %>%
unique() %>%
mutate(content = 'dummy',
number = dum) %>%
select(content, step, number)
# data frame with rates
conv <- df.all$totnum[df.all$step == 'action']
df.rates <- df.all %>%
select(step, totnum) %>%
group_by(step) %>%
unique() %>%
ungroup() %>%
mutate(prevnum = lag(totnum),
rate = ifelse(step == 'new' | step == 'engaged' | step == 'loyal',
round(totnum / conv, 3),
round(totnum / prevnum, 3))) %>%
select(step, rate)
df.rates <- na.omit(df.rates)
# creting final data frame
df.all <- df.all %>%
select(content, step, number)
df.all <- rbind(df.all, df.dum)
df.all <- df.all %>%
group_by(step) %>%
arrange(desc(content)) %>%
ungroup()
# calculating position of labels
df.all <- df.all %>%
group_by(step) %>%
mutate(pos = cumsum(number) - 0.5*number)
# defining order of steps
df.all$step <- factor(df.all$step, levels = c('loyal', 'engaged', 'new', 'action', 'desire', 'interest', 'awareness'))
list <- c(unique(as.character(df.all$content)))
df.all$content <- factor(df.all$content, levels = c('dummy', c(list)))
# creating custom palette with 'white' color for dummies
cols <- c("#ffffff", "#fec44f", "#fc9272", "#a1d99b", "#fee0d2", "#2ca25f",
"#8856a7", "#43a2ca", "#fdbb84", "#e34a33",
"#a6bddb", "#dd1c77", "#ffeda0", "#756bb1")
# plotting chart
ggplot() +
theme_minimal() +
coord_flip() +
scale_fill_manual(values=cols) +
geom_bar(data=df.all, aes(x=step, y=number, fill=content), stat="identity", width=1) +
geom_text(data=df.all[df.all$content!='dummy', ],
aes(x=step, y=pos, label=paste0(content, '-', number/1000, 'K')),
size=4, color='white', fontface="bold") +
geom_ribbon(data=df.lines, aes(x=step, ymax=max(maxx), ymin=maxx, group=1), fill='white') +
geom_line(data=df.lines, aes(x=step, y=maxx, group=1), color='darkred', size=4) +
geom_ribbon(data=df.lines, aes(x=step, ymax=minx, ymin=min(minx), group=1), fill='white') +
geom_line(data=df.lines, aes(x=step, y=minx, group=1), color='darkred', size=4) +
geom_text(data=df.rates, aes(x=step, y=(df.lines$minx[-1]), label=paste0(rate*100, '%')), hjust=1.2,
color='darkblue', fontface="bold") +
theme(legend.position='none', axis.ticks=element_blank(), axis.text.x=element_blank(),
axis.title.x=element_blank())
libary("swirl")
library("swirl")
rm(list=ls())
library("swirl")
swirl()
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
read.csv(path2csv,stringsAsFactors = FALSE)
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran,X:size)
select(cran,-(X:size)
select(cran,-(X:size)
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version >= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size>100500 ,r_os equals =="linux-gnu")
filter(cran, size>100500 ,r_os  =="linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran,ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, package, ip_id)
arrange(cran2, country,desc(r_version),ip_id)
can3<-select(cran,ip_id,package,size)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20,size_gb = size_mb / 2^10 )
mutate(cran3, correct_size = size / 1000)
mutate(cran3, correct_size = size+1000)
summarize(cran,avg_bytes = mean(size))
swirl()
0
exit
quit
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
quit
0
swirl()
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size < 100500, r_os== "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version) )
cran2<-select(cran,size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country,desc(r_version), ip_id)
cran3<-select(cran,ip_id, package,  size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20,size_gb=size_mb / 2^10)
mutate(cran3, correct_size = size +1000)
summarize(cran, avg_bytes = mean(size))
swirl()
library(swirl)
rm(list=ls())
swirl()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res<-gather(student2,sex_class,value,-grade)
res<-gather(students2,sex_class,value,-grade)
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(res,sex_class,c("sex","class"))
submit()
submit()
submit()
students3
submit()
?spread
submit()
extract_numeric("class5")
mutate(class=extract_numeric(class))
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed<-mutate(passed,status="passed")
failed<-mutate(failed,status="failed")
?bind_rows
bind_rows(passed,failed)
sat
submit()
submit()
submit()
submit()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
today()
this_day<-today()
this_day
day(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_moment<-now()
this_moment
minute(this_moment)
ymd("1989-05-17")
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy("25081985")
dmy(25081985)
ymd("192012")
ymd("//192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ym(dt2)
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment<-update(this_moment,hour=houe(now),minute=minute(now()))
this_moment<-update(this_moment,hour=hour(now),minute=minute(now()))
this_moment<-update(this_moment,hour=hour(now()),minute=minute(now()))
this_moment<-update(this_moment,hours=hour(now()),minutes=minute(now()))
this_moment
?now
now(tzone="nyc")
now(tzone="America/New_York")
nyc<-now(tzone="America/New_York")
nyc
depart<-nyc+days(2)
depart
depart<-update(depart,hours=17,minutes=34)
depart
arrive<-depart +hours(15)+minutes(50)
?with_tz
with_tz(arrive,tzone="Asia/Hong_Kong")
arrive<-with_tz(arrive,tzone="Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008",tz = "Singapore")
mdy("June 17, 2008")
last_time<-mdy("June/17/2008",tz = "Singapore")
mdy("June/17/2008")
mdy("6/17/2008")
last_time<-mdy("6/17/2008",tz = "Singapore")
last_time
mdy("6/17/2008",tz="Asia/Singapore")
last_time<-mdy("6/17/2008",tz="Asia/Singapore")
?new_interval
last_time<-with_tz(last_time,tz=tzone="Asia/Hong_Kong")
last_time<-with_tz(last_time,tzone="Asia/Hong_Kong")
how_long<-new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
install.packages("pxweb")
library(pxweb)
source('E:/R/SCB/test_pxweb.R')
View(d)
View(d)
source('E:/R/SCB/test_pxweb.R')
myDataSetName <-
get_pxweb_data(url = "http://api.scb.se/OV0104/v1/doris/sv/ssd/HE/HE0103/HE0103A/Inksum1",
dims = list(Inkomstkomponenter = c('10'),
ContentsCode = c('HE0103AA'),
Tid = c('1991', '1995', '1996', '1997', '1998', '1999', '2000', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013')),
clean = TRUE)
View(myDataSetName)
View(myDataSetName)
myDataSetName <-
get_pxweb_data(url = "http://api.scb.se/OV0104/v1/doris/sv/ssd/HE/HE0103/HE0103A/DispInk10",
dims = list(Inkomstkomponenter = c('10'),
ContentsCode = c('HE0103AA'),
Tid = c('1991', '1995', '1996', '1997', '1998', '1999', '2000', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013')),
clean = TRUE)
install.packages("swirl")
install.packages("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
library(swirl)
swirl()
?Devices
window(faithful)
window()
Window()
windows()
windows(faithful,plot(aruption,waiting))
windows(faithful,plot(eruption,waiting))
with(faithful,plot(eruption,waiting))
with(faithful,plot(eruptions,waiting))
with(faithful,plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
swirl()
library(swirl)
swirl()
pdf(file="myplot.pdf")
with(faithful,plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful,plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png,"geyserplot.png")
dev.copy(png,"./geyserplot.png")
dev.copy(png,file="geyserplot.png")
dev.off()
dev.off(5)
dev.off(4)
dev.off(3)
swirl
swirl()
d<-rnorm(10)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print.trellis(p)
?print.trellis
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
View(airquality)
View(airquality)
View(airquality)
View(airquality)
View(airquality)
View(airquality)
library(datasets)
data(airquality)
View(airquality)
airquality = transform(airquality, Month2 = factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
g <- ggplot(movies, aes(votes, rating))
print(g)
g+geom_point()
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
setwd("E:/R/DataScienseCourse/Rebroducible Research/PeerAssessment1/RepData_PeerAssessment1")
library(dplyr)
a_raw<-read.csv('activity.csv')
summarize(a_raw,n())
summary(a_raw)
length(a_raw)
dim(a_raq)
dim(a_raw)
summarize(a_raw,n(),  na.rm = TRUE)
na_clean<-a.omit(a_raw)
na_clean<-na.omit(a_raw)
nrow(complete.cases(a_raw))
(complete.cases(a_raw))
a_raw[(complete.cases(a_raw)),]
nrows(a_raw[(complete.cases(a_raw)),])
nrow(a_raw[(complete.cases(a_raw)),])
dim(a_raw)
summary(a_raw)
nrow(a_raw[!(complete.cases(a_raw)),])
a_raw[!(complete.cases(a_raw)),]
s_interval <- a_raw %>% filter(!is.na(steps)) %>% group_by(interval)  %>% summarize(steps=mean(steps))
View(s_interval)
a_na<-a_raw[!(complete.cases(a_raw)),]
View(a_na)
a_na<-a_raw[!(complete.cases(a_raw)),c(2,3)]
view(a_na)
View(a_na)
t<-inner_join(a_na,s_interval)
t<-inner_join(a_na,s_interval,by="interval")
View(t)
t<-mutate(t,steps=round(steps))
View(t)
a_na_filled<-a_raw[!(complete.cases(a_raw)),c(2,3)] %>% inner_join(s_interval,by="interval") %>% mutate(steps=round(steps))
View(a_na_filled)
View(a_na)
View(a_raw)
t<-rbind(a_raw[(complete.cases(a_raw)),],a_na_filled)
View(t)
summary(a_raw)
dim(a_raw)
a_na_count<-nrow(a_raw[!(complete.cases(a_raw)),])
a_na_filled<-a_raw[!(complete.cases(a_raw)),c(2,3)] %>% inner_join(s_interval,by="interval") %>% mutate(steps=round(steps))
mean<-mean(a_filled$steps)
